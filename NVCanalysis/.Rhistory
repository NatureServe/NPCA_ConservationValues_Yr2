theme_void()+ #punches hole in donut
theme(legend.position = "bottom", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
#facet_wrap(vars(), ncol=8)
}
lstStudyAreas
i=10
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, GAPstatus) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$GAPstatus <- factor(StudyArea_subset2$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "bottom", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_GAPsts_GYE.png"), plot = p, bg = "transparent",dpi = 300)
View(StudyAreaGroup_subset2)
View(StudyArea_subset1)
inputTabAreaManaged <- "S:/Projects/NPCA/Data/Intermediate/GAP_Analysis.gdb/TabArea_MangNS_xStudyAreasV2"
inputTabAreaManaged <- arc.open(inputTabAreaManaged)
inputTabAreaManaged <- arc.select(inputTabAreaManaged)
inputTabAreaManaged <- as.data.frame(inputTabAreaManaged)
lstStudyAreas
i=9
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, GAPstatus) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$GAPstatus <- factor(StudyArea_subset2$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_GAPsts_Everglades.png"), plot = p, bg = "transparent",dpi = 300)
lstStudyAreas
i=12
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, GAPstatus) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$GAPstatus <- factor(StudyArea_subset2$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_GAPsts_Everglades.png"), plot = p, bg = "transparent",dpi = 300)
lstStudyAreas
i=10
i=9
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, GAPstatus) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$GAPstatus <- factor(StudyArea_subset2$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = GAPstatus))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
#facet_wrap(vars(), ncol=8)
}
ggsave(paste0("StudyArea_GAPsts_Everglades.png"), plot = p, bg = "transparent",dpi = 300)
inputTabAreaManaged$OBJECTID <- NULL
## Sets the manager information
inputTabAreaManaged$Manager <- paste(inputTabAreaManaged$Mang_NS)
lstStudyAreas <- unique(inputTabAreaManaged$NAME)
lstManagers <- unique(inputTabAreaManaged$Mang_NS)
for(i in 1:length(lstStudyAreas)){
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaManaged[which(inputTabAreaManaged$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, Mang_NS) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels = c(lstManagers))
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels =c('Unmanaged','UNK','PVT','TRIB','STAT','LOC','FED','DOE','DOD','NGO','BLM','FWS','USFS','NPS'))
StudyArea_subset2 <- plyr::ddply(StudyArea_subset2, c('Mang_NS')) #sorts the dataframe to match the way the factors are sorted
StudyArea_subset2$Mang_NS <- fct_rev(StudyArea_subset2$Mang_NS)
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "bottom", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
}
lstStudyAreas
i=10
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaManaged[which(inputTabAreaManaged$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, Mang_NS) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels = c(lstManagers))
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels =c('Unmanaged','UNK','PVT','TRIB','STAT','LOC','FED','DOE','DOD','NGO','BLM','FWS','USFS','NPS'))
StudyArea_subset2 <- plyr::ddply(StudyArea_subset2, c('Mang_NS')) #sorts the dataframe to match the way the factors are sorted
StudyArea_subset2$Mang_NS <- fct_rev(StudyArea_subset2$Mang_NS)
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "bottom", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "bottom", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_Mangsts_GYE_wLegend.png"), plot = p, bg = "transparent",dpi = 300)
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_Mangsts_GYE.png"), plot = p, bg = "transparent",dpi = 300)
lsts
lstStudyAreas
i=9
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaManaged[which(inputTabAreaManaged$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, Mang_NS) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels = c(lstManagers))
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels =c('Unmanaged','UNK','PVT','TRIB','STAT','LOC','FED','DOE','DOD','NGO','BLM','FWS','USFS','NPS'))
StudyArea_subset2 <- plyr::ddply(StudyArea_subset2, c('Mang_NS')) #sorts the dataframe to match the way the factors are sorted
StudyArea_subset2$Mang_NS <- fct_rev(StudyArea_subset2$Mang_NS)
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_Mangsts_Everglades.png"), plot = p, bg = "transparent",dpi = 300)
lstStudyAreas
i=12
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaManaged[which(inputTabAreaManaged$NAME==lstStudyAreas[i]),] #makes it so you can loop through the study areas
StudyArea_subset1 <- StudyArea_subset %>% #groups by study area and calculates the total area
group_by( NAME, Mang_NS) %>%
summarise(Area = sum(Area)) %>%
ungroup()
StudyArea_subset2 <- StudyArea_subset1 %>% #calculates the percentages
group_by(NAME) %>%
mutate(PercentArea =   (Area / sum(Area)*100) )
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels = c(lstManagers))
StudyArea_subset2$Mang_NS <- factor(StudyArea_subset2$Mang_NS, levels =c('Unmanaged','UNK','PVT','TRIB','STAT','LOC','FED','DOE','DOD','NGO','BLM','FWS','USFS','NPS'))
StudyArea_subset2 <- plyr::ddply(StudyArea_subset2, c('Mang_NS')) #sorts the dataframe to match the way the factors are sorted
StudyArea_subset2$Mang_NS <- fct_rev(StudyArea_subset2$Mang_NS)
StudyArea_subset2$ymax = cumsum(StudyArea_subset2$PercentArea) #sets top of rectangle for ggplot
StudyArea_subset2$ymin = c(0, head(StudyArea_subset2$ymax, n=-1)) #sets bottom of rectange for ggplot
p <- StudyArea_subset2 %>%
ggplot (aes(x=2, ymax=ymax,ymin=ymin, xmax=4, xmin=3, fill = Mang_NS))+
geom_rect()+
ggtitle(paste(lstStudyAreas[i],"Study Area")) +
coord_polar(theta = "y")+ #makes plot circular
scale_y_reverse()+
scale_fill_manual(values=c("Unmanaged" = "#B1B1B1",
"UNK" = "#7F7F7F",
"PVT" = "#6a3d9a",
"TRIB" = "#b15928",
"STAT" = "#ffff99",
"LOC" = "#e31a1c",
"FED" = "#fb9a99",
"DOE" = "#b2df8a",
"DOD" = "#1f78b4",
"NGO" = "#ff7f00",
"BLM" = "#a6cee3",
"FWS" = "#fdbf6f",
"USFS" = "#1F601A",
"NPS" = "#3BB432"))+
theme_void()+ #punches hole in donut
theme(legend.position = "none", legend.title = element_blank(),plot.title.position = "plot")+
xlim(1,4) #sets width of donut
ggsave(paste0("StudyArea_Mangsts_NorthCascades.png"), plot = p, bg = "transparent",dpi = 300)
StudyAreaGroup_subset3 %>%
ggplot(aes(x = reorder(axislable, TotalPosPercent),
y = PercentArea2,
fill = GAPstatus)) +
geom_col() +
coord_flip() +
geom_abline(slope=0, intercept=0.0,  col = "white") +
ggtitle(paste(lstStudyAreas[i])) +
ylab("Outside Study Area                                                             Inside Study Area") +
scale_y_continuous(limits = c(-100, 100), breaks=c(-100,-75,-50,-25, 0, 25,50,75,100), labels=c("100%","75%","50%","25%", "0%", "25%","50%","75%","100%")) +
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"), guide = guide_legend(reverse = TRUE)) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.title=element_blank(),
axis.title = element_blank(),
legend.position = "none",
plot.title.position = "plot")
library(tidyverse)
library(arcgisbinding)
arc.check_product()
options(scipen=999) # don't use scientific notation
inputTabAreaGAP <- "S:/Projects/NPCA/_Year2/Data/Intermediate/TabulateAreaTables_yr2.gdb/TabArea_GYE_Systems_GAPsts" # UPDATE Input Tabulate Area table - Managed Lands or GAP status focused
inputTabAreaGAP <- arc.open(inputTabAreaGAP)
inputTabAreaGAP <- arc.select(inputTabAreaGAP)
inputTabAreaGAP <- as.data.frame(inputTabAreaGAP)
inputRaster <- "S:/Projects/NPCA/Data/Intermediate/NationalAnalysis.gdb/Landfire_EVT_2020_IVC_join_2023" #
inputRaster <- arc.open(inputRaster)
inputRaster <- arc.select(inputRaster)
inputRaster <- as.data.frame(inputRaster)
inputTabAreaGAP$OBJECTID <- NULL
inputTabAreaManaged$OBJECTID <- NULL
## split out study area
inputTabAreaGAP$StudyArea <- "NA"
inputTabAreaGAP$StudyArea <- gsub("\\(([^()]+)\\)", "\\1",str_extract(inputTabAreaGAP$NPCA_Status_GAP_StudyArea, "\\(([^()]+)\\)"))
## split out protected unprotected
inputTabAreaGAP$Protected <- "NA"
inputTabAreaGAP$Protected <- gsub("^(.*?),.*", "\\1", inputTabAreaGAP$NPCA_Status_GAP_StudyArea)
## split out GAP status
inputTabAreaGAP$GAPstatus <- "NA"
inputTabAreaGAP$GAPstatus <- sub(".*GAP ", "", inputTabAreaGAP$NPCA_Status_GAP_StudyArea)
inputTabAreaGAP$GAPstatus <- sub(".*?(\\d+)", "\\1", inputTabAreaGAP$NPCA_Status_GAP_StudyArea)
inputTabAreaGAP$GAPstatus <- as.integer(substring(inputTabAreaGAP$GAPstatus, 1, 1))
# this enables verification of Naturalness in a later step
inputTabAreaGAP <- merge(inputTabAreaGAP, inputRaster[c("NatureServ","RLE_FINAL", "Naturalnes")], by.x="NatureServ", by.y="NatureServ")
# subset by RLE status
inputTabAreaGAP$RLE_FINAL <- substr(inputTabAreaGAP$RLE_FINAL, 1, 2)
inputTabAreaGAP <- inputTabAreaGAP[which(inputTabAreaGAP$RLE_FINAL %in% c("CR", "EN", "VU")), ]
lstStudyAreas <- unique(inputTabAreaGAP$StudyArea)
for(i in 1:length(lstStudyAreas)){
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$StudyArea==lstStudyAreas[i]),]
lstGroups_subset <- unique(StudyArea_subset[which(StudyArea_subset$Naturalnes=="Natural"),"NatureServ"] )
# create an empty data frame
StudyAreaGroup_subsetComb <- inputTabAreaGAP[0,]
for(j in 1:length(lstGroups_subset)){  #
print(paste("working on ", lstGroups_subset[j], sep=""))
StudyAreaGroup_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NatureServ==lstGroups_subset[j]),]
StudyAreaGroup_subset[which(StudyAreaGroup_subset$StudyArea!=lstStudyAreas[i]),"StudyArea"] <- NA
StudyAreaGroup_subsetComb <- rbind(StudyAreaGroup_subsetComb, StudyAreaGroup_subset)
StudyAreaGroup_subset1 <- StudyAreaGroup_subsetComb %>%
group_by( StudyArea, Protected, GAPstatus, NatureServ, RLE_FINAL) %>% #NPCA_status_GAP_StudyArea,
summarise(TotalArea = sum(Area)) %>%
ungroup()
StudyAreaGroup_subset2 <- StudyAreaGroup_subset1 %>%
group_by(NatureServ) %>%
mutate(PercentArea =   (TotalArea / sum(TotalArea)*100) ) %>%
mutate(TotalArea2 = if_else(is.na(StudyArea), -TotalArea, TotalArea)) %>%
mutate(PercentArea2 = if_else(is.na(StudyArea), -PercentArea, PercentArea))
StudyAreaGroup_subset3 <- StudyAreaGroup_subset2 %>%
group_by(NatureServ) %>%
mutate(TotalPosPercent =sum(PercentArea2[PercentArea2>0]))
StudyAreaGroup_subset3 <- StudyAreaGroup_subset3[which(StudyAreaGroup_subset3$TotalPosPercent>0),]
StudyAreaGroup_subset3$axislable <- paste0(StudyAreaGroup_subset3$NatureServ, " (", StudyAreaGroup_subset3$RLE_FINAL, ")")
StudyAreaGroup_subset3$GAPstatus <- paste0("GAP",StudyAreaGroup_subset3$GAPstatus)
StudyAreaGroup_subset3$GAPstatus[which(StudyAreaGroup_subset3$GAPstatus=="GAPNA")] <- "Unprotected"
StudyAreaGroup_subset3$GAPstatus <- factor(StudyAreaGroup_subset3$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyAreaGroup_subset3 %>%
ggplot(aes(x = reorder(axislable, TotalPosPercent),
y = PercentArea2,
fill = GAPstatus)) +
geom_col() +
coord_flip() +
geom_abline(slope=0, intercept=0.0,  col = "white") +
ggtitle(paste(lstStudyAreas[i])) +
ylab("Outside Study Area                                                             Inside Study Area") +
scale_y_continuous(limits = c(-100, 100), breaks=c(-100,-75,-50,-25, 0, 25,50,75,100), labels=c("100%","75%","50%","25%", "0%", "25%","50%","75%","100%")) +
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"), guide = guide_legend(reverse = TRUE)) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.title=element_blank(),
axis.title = element_blank(),
legend.position = "none",
plot.title.position = "plot")
}
}
lstStudyAreas
i=12
print(paste("working on ", lstStudyAreas[i], sep=""))
StudyArea_subset <- inputTabAreaGAP[which(inputTabAreaGAP$StudyArea==lstStudyAreas[i]),]
lstGroups_subset <- unique(StudyArea_subset[which(StudyArea_subset$Naturalnes=="Natural"),"NatureServ"] )
# create an empty data frame
StudyAreaGroup_subsetComb <- inputTabAreaGAP[0,]
for(j in 1:length(lstGroups_subset)){  #
print(paste("working on ", lstGroups_subset[j], sep=""))
StudyAreaGroup_subset <- inputTabAreaGAP[which(inputTabAreaGAP$NatureServ==lstGroups_subset[j]),]
StudyAreaGroup_subset[which(StudyAreaGroup_subset$StudyArea!=lstStudyAreas[i]),"StudyArea"] <- NA
StudyAreaGroup_subsetComb <- rbind(StudyAreaGroup_subsetComb, StudyAreaGroup_subset)
StudyAreaGroup_subset1 <- StudyAreaGroup_subsetComb %>%
group_by( StudyArea, Protected, GAPstatus, NatureServ, RLE_FINAL) %>% #NPCA_status_GAP_StudyArea,
summarise(TotalArea = sum(Area)) %>%
ungroup()
StudyAreaGroup_subset2 <- StudyAreaGroup_subset1 %>%
group_by(NatureServ) %>%
mutate(PercentArea =   (TotalArea / sum(TotalArea)*100) ) %>%
mutate(TotalArea2 = if_else(is.na(StudyArea), -TotalArea, TotalArea)) %>%
mutate(PercentArea2 = if_else(is.na(StudyArea), -PercentArea, PercentArea))
StudyAreaGroup_subset3 <- StudyAreaGroup_subset2 %>%
group_by(NatureServ) %>%
mutate(TotalPosPercent =sum(PercentArea2[PercentArea2>0]))
StudyAreaGroup_subset3 <- StudyAreaGroup_subset3[which(StudyAreaGroup_subset3$TotalPosPercent>0),]
StudyAreaGroup_subset3$axislable <- paste0(StudyAreaGroup_subset3$NatureServ, " (", StudyAreaGroup_subset3$RLE_FINAL, ")")
StudyAreaGroup_subset3$GAPstatus <- paste0("GAP",StudyAreaGroup_subset3$GAPstatus)
StudyAreaGroup_subset3$GAPstatus[which(StudyAreaGroup_subset3$GAPstatus=="GAPNA")] <- "Unprotected"
StudyAreaGroup_subset3$GAPstatus <- factor(StudyAreaGroup_subset3$GAPstatus, levels = c("Unprotected","GAP4","GAP3","GAP2","GAP1"))
StudyAreaGroup_subset3 %>%
ggplot(aes(x = reorder(axislable, TotalPosPercent),
y = PercentArea2,
fill = GAPstatus)) +
geom_col() +
coord_flip() +
geom_abline(slope=0, intercept=0.0,  col = "white") +
ggtitle(paste(lstStudyAreas[i])) +
ylab("Outside Study Area                                                             Inside Study Area") +
scale_y_continuous(limits = c(-100, 100), breaks=c(-100,-75,-50,-25, 0, 25,50,75,100), labels=c("100%","75%","50%","25%", "0%", "25%","50%","75%","100%")) +
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"), guide = guide_legend(reverse = TRUE)) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.title=element_blank(),
axis.title = element_blank(),
legend.position = "none",
plot.title.position = "plot")
}
StudyAreaGroup_subset3 %>%
ggplot(aes(x = reorder(axislable, TotalPosPercent),
y = PercentArea2,
fill = GAPstatus)) +
geom_col() +
coord_flip() +
geom_abline(slope=0, intercept=0.0,  col = "white") +
ggtitle(paste(lstStudyAreas[i])) +
ylab("Outside Study Area                                                             Inside Study Area") +
scale_y_continuous(limits = c(-100, 100), breaks=c(-100,-75,-50,-25, 0, 25,50,75,100), labels=c("100%","75%","50%","25%", "0%", "25%","50%","75%","100%")) +
scale_fill_manual(values=c("#b1b1b1","#bed5cf","#659fb5","#869447","#27613b"), guide = guide_legend(reverse = TRUE)) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.title=element_blank(),
axis.title = element_blank(),
legend.position = "none",
plot.title.position = "plot")
